Add disaggregate functions to Makefile:

VE_MODBUILD (replaces VE_ONLY_BUILD)

If unset, build all modules, otherwise only those with names matching a comma-separated list.

VE_MCLEAR

This is processed before anything afterwsrds in the build

Remove module files prior to building. Must have one of these values (or it is ignored), or a
comma-separated subset:

"all"  - same as make modules-clean, but only for VE_MODBUILD (and ignored if no VE_MODBUILD set)
"docs" - clear the module_docs and regular man folders
"data" - clear the data/ folder
"init" - clear the NAMESPACE and Collation

Related TODO: create a framework function for locating needed package data, that will work through a
script-only load (e.g. via pkgload), or when there is no package for the regular R data() function
to work in. Should route through <model>/<local>/<module>, then looking in
<runtime>/<local>/<module>; with sub-directories for data/ and extdaa/. Local extdata/ is used
during estimation, Local data/ is used when we want to retrieve built data files. Need a framework
version of system.file() that can get us data/ and extdata/ consistently (so we get the right file
when the R scripts are being run during check, build, etc.)

VE_MINIT

Mutually exclusive options (strip everything from a comma on)

"all"  - generate everything
"init" - generate NAMESPACE and Collation (not the function docs) (will run if they are not present)
"docs" - Run the roxygen step to generate .Rd files (will run if they are not present)

VE_MTEST

Can have different values. If not set, do not do R CMD check at all, and no tests. Otherwise:
"all" - do all tests (run, chk, pkg)
"chk" - run R CMD check but --no-tests
"pkg" - do package tests (run R CMD check with tests enabled) (unit testing)
"run" - do runtime tests (is it working?) after the package has been built (good for developers)

Should be able to do the "run" tests from a pkgload installation. Also should have an
incremental set of data in a Datastore (with a ModelState) that can be used for the local
module test (a snapshot of the datastore from the sample or mini model run).
