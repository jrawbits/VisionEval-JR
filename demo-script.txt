Pre-run key parts of the following (perhaps via an .Rmd document)

model structures
  inputs, defs, run_model.R
  results, outputs
out with the old
  initializeModel, run_parameters.json
in with the new
  visioneval.cnf: ve.runtime, model, model stage
what's a model stage?
  a runnable unit
  fully specified in parameters
review of model parameters applied at each level
  Use the read configuration function to show them
  Configuration type to print more cleanly
  runtime:
    system structures (e.g. standard file names, datastore type)
    default behavior (SaveDatastore)
  model:
    model defs (geo.csv, units.csv, deflators.csv)
    run_model.R (or can be set for individual stages)
    inputs (or can be set for individual stages)
    BaseYear
    Random Seed (or can be set for individual stages)
    LoadModel (to begin from pre-built Datastore)
  stage:
    Scenario/Description
    Years
    stage-specific: inputs (altered from model)
    StartFrom (earlier stage)
installing sample models to see what it's all about
  VERSPM variants (how to investigate what is provided)
examine the model configuration
run the model
  run types: reset, save, continue
look at the results structure (ResultsDir)
staged Datastores
  Each stage generates a Datastore, which are combined logically to yield "results"
    Reportable stages are an entry point for a "complete" run
  Use visioneval::copyDatastore to collapse stages into one place
staged Inputs
  Have a single inputs directory for the model; stages use as needed
  Or distribute the inputs across the stages
  Or just have the stage add in a file or two relative to its StartFrom
    THose supplant same-named files in the earlier stage
looking at the model structures:
  getting a list of inputs and Datastore elements constructed
accessing results
  Model results are reported out for "Reportable" stages (though any stage can be requested by name)
  Listing out fields available in the Datastore (includes StartFrom Datastores)
querying results
  Creating a query specification (set of several)
  Running a query on results (default: all Reportable stages in a model)
    Could be a list of result directories, a set of models
using stages to create scenarios
  Dropping a new stage into a model by writing its configuration
  In memory stage creation (e.g. to "impose" scenarios on a BaseModel without actually changing the model)
post-mortem debugging with LoadModel
  A crashed model is still a model, and it can be Loaded
Things still to clean up:
  Better display/editing of visioneval.cnf parameters
  Better/more automated scenario management
  Guidance on constructing input files
  RunScript directive
  Adapt framework test module functions to work with RunScript (additional module script support)