% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/models.R
\name{openModel}
\alias{openModel}
\title{Install and Use a VisionEval Model}
\usage{
openModel(modelPath, modelName = NULL, install = TRUE)
}
\arguments{
\item{modelPath}{Directory containing a VisionEval model; if an empty character string is
provided, prints a list of available standard models (see details)}

\item{modelName}{Name displayed for this model (also used as basename for model copy);
defaults to `basename(modelPath)`}

\item{install}{if TRUE (default), if model with that name is not found, install a skeleton for
the matching standard model name}
}
\value{
A VEModel object or a VEModelList of available models if no modelPath or modelName is
  provided; see details and `vignette("VEModel")`
}
\description{
`openModel` opens a VisionEval model and returns a VEModel object (q.v.) through
   which it can be manipulated (run or queried)
}
\details{
See `vignette(package='VEModel')` for available help and reference materials.
  The basic use of `openModel` is also described in the VisionEval Getting-Started
  document on the VisionEval website (also in the VisionEval installer).
}
\section{Model Path and Name}{


The `modelPath` parameter locates a model object. When a model is opened, a
  a relative modelPath will be sought in the user's runtime `models` directory.
  An absolute path will be sought only in the user's file system.

The `modelName` parameters will specify the name of the model directory within
  modelPath. That can be used to install a standard model again (in a different
  subdirectory), or to look for a model in a different directory than the visioneval
  runtime `models` directory (or a substitute provided through `options(VEModelPath=...)`.

You can set an alternate location for the "models" subdirectory by providing an
  a path using, for example, `options(VEModelPath='mymodels')`. Relative paths
  will be sought below the VisionEval runtime directory. Absolute paths will
  be sought in the user's file system.

An error will be raised if a model cannot be found or created with the indicated
  modelPath and modelName.
}

\section{Standard Models}{


If a model is indicated by a name with no path (e.g. `openModel('VERSPM')`) and it is
  not found in the `models` directory, then a VisionEval standard model will be sought
  by that name in the VEModel package and copied to the `models` directory. To skip that search,
  open the model with `installModel=FALSE`. If the parameter `installData=TRUE` (default),
  the full sample data will be copied and the sample model can be run. If `installData=FALSE`
  only skeleton `inputs` and `defs` will be copied (no actual data will ge supplied and the
  model won't run until data is provided).
}

\section{Available Models}{


You can see the available models by providing an empty string for the `modelPath`.
  A VEModelList (q.v.) object will be printed as a side-effect, and also returned invisibly.
  You can open an installed model from the VEModelList using
  square brackets to index the list by position (`VEModelList[1]`) or by name
  (`VEModelList['VERSPM']`). To open an un-installed standard model, just provide
  the standard model name as modelPath.
}

