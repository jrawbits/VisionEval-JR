head
  meta
  title
  Javascript libraries (could put at bottom)
    <script src='js/d3.min.js'></script>
    <script src='js/crossfilter.min.js'></script>
    <script src='js/dc.min.js'></script>
    <script src='js/jquery-1.10.2.js'></script>
    <script src='js/bootstrap.min.js'></script>
    <script src='js/colorbrewer.js'></script>
  CSS libraries
    <link href='css/bootstrap.min.css' rel='stylesheet' type='text/css'>
    <link href='css/dc.css' rel='stylesheet' type='text/css'>
    <link href='css/colorbrewer.css' rel='stylesheet' type='text/css'>
    <link href='css/style.css' rel='stylesheet' type='text/css'>
      Contains: .stack._1 > .bar { fill:darkgray; }
    Inline CSS styles

body
  Div H2 Scenario Viewer
  Div About / Quick Start / Detailed Instructions buttons
    Pop up one of the following modals
  Div About
  Div Quick Start
  Div Detailed Instructions
  HR
  Div container Category Pie Charts
    Div id='ScenarioInputCharts'
  Div container Output Bar Charts
    Heading and Reset links
      id=filter; id=total to display what is selected
      <a href="javascript:history.go(0)">Clear All Selections</a>
    Output Measure Bar Charts
      Div id=OutputInputCharts (sic!)
  Div container col-sm-12 Scenario Data Table
    Table id=Scenario-Results
  
  Remainder of body is Javaascript
    // Actual data about scenarios and categories
    <script src='data/VERSPM/scenario-cfg.js' type='text/javascript'></script>
    <script src='data/VERSPM/category-cfg.js' type='text/javascript'></script>
    Javascript laying out scenarios and categories

    // Actual data about outputs
    <script src='data/VERSPM/output-cfg.js' type='text/javascript'></script>
    Javascript constructing output bar charts

    // Reference data and scenario data
    <script src='data/VERSPM/verspm.js' type='text/javascript'></script>
    <script src='data/VERSPM/verspm-ref.js' type="text/javascript"></script>
    Javascript to implement visualization
      It's hard-coded here for number of categories/output measures
      The names for these elements are constructed programmatically earlier
      All of this manipulation should be done iteratively
        for each of the input categories and output measures.
      So build a better structure...

Explaining the crossfilter: https://vizdatauk.wordpress.com/2016/05/20/getting-to-know-dc-js/
Explaining d3 + crossfilter: https://www.asynclabs.co/blog/software-development/how-to-visualize-big-data-sets-with-d3-js/
Explaining dc.js: https://www.tutorialspoint.com/dcjs/index.htm

Two levels of output organization:
  Interior Category/Level to identify specific scenarios falling in different groups (scenario-cfg.js)
  Exterior Category/Level mapped to sets of Interior Category/Level (category-cfg.js)
    How to describe that with the scenarios?

The processing is using a series of hard-coded variables with "indexed names":
Too hard to maintain in code. Need to do multi-level Javascript arrays, and
then iterate across the indexes based on the array length, which in turn should
be set up just by reading in the original Javascript descriptive elements.

Initial effort in the HTML would be to change the names to arrays with indexing.

Data files:
  category-cfg.js     5,210
    Perhaps call these "DisplayGroup"
    array of category/DisplayGroup structures:
      NAME
      DESCRIPTION
      LEVELS : array of level structures:
        NAME
        INPUTS : array of input structures
          NAME: (of scenario element; see scenario-cfg.s)
          LEVEL: (of scenario element; see scenario-cfg.js)
  output-cfg.js       3,622
    Could come from the query spec
    Need to be regional specifications (or specific geography)
    Need to be scalar measures (no breaks)
    Key properties
      outputCol[index] = values.COLUMN;        // name of metric column in data table
      var outputName   = values.NAME;          // name of metric column (descriptive) e.g. Truck Delay
      var outputLabel  = values.LABEL;         // short version of name
      var outputDesc   = values.DESCRIPTION;   // e.g. 
      var outputInst   = values.INSTRUCTIONS;  // NOT USED: same as DESCRIPTION
      var outputMetric = values.METRIC;        // all examples are "average"; could also be "sum"
      var outputUnit   = values.UNIT;          // human readable unit description (lookup from query unit?)
  scenario-cfg.js     6,854
    Tracks with Categories in the VEModelScenario
    Array of ScenarioCategory structures:
      NAME                  // Single letter
      LABEL                 // Short phrase
      DESCRIPTION           // Full description
      INSTRUCTIONS          // NOT USED (differs from DESCRIPTION)
      LEVELS : array of level structures
        NAME                // Single Number
        LABEL               // Short phrase
        DESCRIPTION         // Full description
      Core category description also includes FILES
      Instructions could include description of file columns get adjusted
      Also have instructions for Levels to explain what is done to files
  verspm-ref.js         254 // reference values - need to figure out how generated and what used for
    Could provide "reduction" - generated from base scenario or base year?
    One row per metric? But has 11 rows, whereas only 8 metrics are displayed
  verspm.js         200,425
    "Scenario" // the literal word "Scenario"
    "Full Name" // the Stage name for the scenario...
    "Individual Components: Category + Level" (2 cols for each category/level)
    "Metrics" (column name is output-cfg.COLUMN; one column for each metric)
